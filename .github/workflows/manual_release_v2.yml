name: Manual Release V2

on:
  workflow_dispatch:
    inputs:
      bump_minor:
        description: "Bump minor version"
        required: false
        default: "false"
      bump_major:
        description: "Bump major version"
        required: false
        default: "false"
      release_type:
        description: "either stable or beta"
        required: false
        default: "stable"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest tags
        id: get_latest_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_tags=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name' 2>/dev/null)


          #checks if there are any tags at all
          if [[ -z "$release_tags" ]]; then
            latest_stable="v0.0.0"
            latest_beta=""
          else
          
            stable_releases=$(echo "$release_tags" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V -r)
            beta_releases=$(echo "$release_tags" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-beta[0-9]+$' | sort -V -r)

            if [[ -z "$stable_releases" ]]; then
              latest_stable="v0.0.0"
            else
              latest_stable=$(echo "$stable_releases" | head -n1)
            fi

            if [[ -z "$beta_releases" ]]; then
              latest_beta=""
            else
              latest_beta=$(echo "$beta_releases" | head -n1)
            fi
          fi

          echo "Latest stable tag: $latest_stable"
          echo "Latest beta tag: $latest_beta"

          echo "latest_stable=$latest_stable" >> "$GITHUB_OUTPUT"
          echo "latest_beta=$latest_beta" >> "$GITHUB_OUTPUT"

      - name: Calculate new release tag and version
        id: calculate_release
        run: |
          latest_stable="${{ steps.get_latest_tag.outputs.latest_stable }}"
          release_tags=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name' 2>/dev/null)

          # Strip leading v
          latest_tag_clean="${latest_stable#v}"
          IFS='.' read -r major minor patch <<< "$latest_tag_clean"

          # Handle version bumps
          if [[ "${{ github.event.inputs.bump_major }}" == "true" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ github.event.inputs.bump_minor }}" == "true" ]]; then
            minor=$((minor + 1))
            patch=0
          fi

          patch=$((patch + 1))
          base_version="$major.$minor.$patch"

          release_type="${{ github.event.inputs.release_type }}"
          tag="$base_version"
          beta_version=0

          if [[ "$release_type" == "beta" ]]; then
            existing_betas=$(echo "$release_tags" | grep -E "^v${base_version}-beta[0-9]+$" | sort -V -r)
            if [[ -z "$existing_betas" ]]; then
              beta_version=1
            else
              last_beta=$(echo "$existing_betas" | head -n1)
              beta_suffix="${last_beta#v${base_version}-beta}"
              beta_version=$((beta_suffix + 1))
            fi
            tag="${base_version}-beta${beta_version}"
          fi

          echo "New tag: $tag"
          echo "Version: $base_version"
          echo "Beta version: $beta_version"

          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "version=$base_version" >> "$GITHUB_OUTPUT"
          echo "beta_version=$beta_version" >> "$GITHUB_OUTPUT"

      - name: Update version in blender_manifest.toml
        run: |
          sed -i 's/^version = ".*"/version = "${{ steps.calculate_release.outputs.base_version }}"/' blender_manifest.toml
          sed -i 's/^beta_version = ".*"/version = "${{ steps.calculate_release.outputs.beta_version }}"/' blender_manifest.toml
          sed -i 's/^release_channel = ".*"/version = "${{github.event.inputs.release_type}}"/' blender_manifest.toml

      - name: Create builds directory
        run: mkdir -p builds

      - name: Create zip archive
        run: |
          repo_name=$(basename `git rev-parse --show-toplevel`)
          zip_name="${repo_name}_${{ steps.get_tag.outputs.new_tag }}.zip"
          zip -r "builds/$zip_name" . \
            -x ".git/*" \
            -x ".github/*" \
            -x "builds/*" \
            -x "/__pycache__/*" \
            -x "**/__pycache__/*"

      - name: Commit updated blender_manifest.toml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add blender_manifest.toml
          git commit --allow-empty -m "Update version to ${{ steps.get_tag.outputs.new_tag }}"
          git push

      - name: Create new GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_flag=""
          if [[ "${{ github.event.inputs.release_type }}" == "beta" ]]; then
            release_flag="--prerelease"
          fi

          gh release create "${{ steps.get_tag.outputs.new_tag }}" \
            --title "$(basename `git rev-parse --show-toplevel`) ${{ steps.get_tag.outputs.new_tag }}" \
            --notes "Automated release" \
            $release_flag \
            "builds/$(basename `git rev-parse --show-toplevel`)_${{ steps.get_tag.outputs.new_tag }}.zip"
