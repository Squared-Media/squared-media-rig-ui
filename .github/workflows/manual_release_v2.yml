name: Manual Release V2

on:
  workflow_dispatch:
    inputs:
      bump_minor:
        description: "Bump minor version"
        required: false
        default: "false"
      bump_major:
        description: "Bump major version"
        required: false
        default: "false"
      release_type:
        description: "either stable or beta"
        required: false
        default: "beta"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get latest release tag and calculate new version
        id: get_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch all releases
          release_tags=$(gh api repos/${{ github.repository }}/releases --jq '.[].tag_name' 2>/dev/null)

          if [[ -z "$release_tags" ]]; then
            latest_tag="v0.0.0"
          else

            # Find latest stable release (ignore beta-releases)
            stable_releases=$(echo "$release_tags" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V -r)
            if [[ -z "$stable_releases" ]]; then
              latest_tag="v0.0.0"
            else
              latest_tag=$(echo "$stable_releases" | head -n1)
            fi
          fi

          
          latest_tag_clean="${latest_tag#v}"
          IFS='.' read -r major minor patch <<< "$latest_tag_clean"

          # Apply major/minor bumps
          if [[ "${{ github.event.inputs.bump_major }}" == "true" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ github.event.inputs.bump_minor }}" == "true" ]]; then
            minor=$((minor + 1))
            patch=0
          fi

          # Default: increment patch
          patch=$((patch + 1))
          base_version="$major.$minor.$patch"

          release_type="${{ github.event.inputs.release_type }}"

          if [[ "$release_type" == "beta" ]]; then
            # Count existing beta-releases with this base version
            existing_betas=$(echo "$release_tags" | grep -E "^${base_version}-beta[0-9]+$" | sort -V -r)
            if [[ -z "$existing_betas" ]]; then
              beta_version=1
            else
              last_beta=$(echo "$existing_betas" | head -n1)
              beta_suffix="${last_beta#${base_version}-beta}"
              beta_version=$((beta_suffix + 1))
            fi
            new_tag="${base_version}-beta${beta_version}"
          else
            # stable release
            new_tag="$base_version"
          fi

          echo "latest beta: $beta_version"


          
          echo "Calculated new tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          echo "new_tag_with_v=v$new_tag" >> "$GITHUB_OUTPUT"
          echo "base_version=$base_version" >> "$GITHUB_OUTPUT"
          echo "beta_version=$beta_version" >> "$GITHUB_OUTPUT"



      - name: Update version in blender_manifest.toml
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ steps.get_tag.outputs.base_version }}\"/" blender_manifest.toml
          sed -i "s/^beta_version = \".*\"/beta_version = \"${{ steps.get_tag.outputs.beta_version }}\"/" blender_manifest.toml
          sed -i "s/^release_channel = \".*\"/release_channel = \"${{ github.event.inputs.release_type }}\"/" blender_manifest.toml

          echo "version = ${{ steps.get_tag.outputs.base_version }}"
          echo "beta_version = ${{ steps.get_tag.outputs.beta_version }}"
          echo "release_channel = ${{ github.event.inputs.release_type }}"

      - name: Commit updated blender_manifest.toml
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add blender_manifest.toml
          git commit --allow-empty -m "Update version to ${{ steps.get_tag.outputs.new_tag }}"
          git push

          
      - name: Create builds directory
        run: mkdir -p builds

      - name: Create zip archive
        run: |
          repo_name=$(basename `git rev-parse --show-toplevel`)
          zip_name="${repo_name}.zip"
          zip -r "builds/$zip_name" . \
            -x ".git/*" \
            -x ".github/*" \
            -x "builds/*" \
            -x "/__pycache__/*" \
            -x "**/__pycache__/*"

      - name: Create versioned zip archive
        run: |
          repo_name=$(basename `git rev-parse --show-toplevel`)
          zip_name="${repo_name}_${{ steps.get_tag.outputs.new_tag }}.zip"
          zip -r "builds/$zip_name" . \
            -x ".git/*" \
            -x ".github/*" \
            -x "builds/*" \
            -x "/__pycache__/*" \
            -x "**/__pycache__/*"


      - name: Create new GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_flag=""
          if [[ "${{ github.event.inputs.release_type }}" == "beta" ]]; then
            release_flag="--prerelease"
          fi

          gh release create "${{ steps.get_tag.outputs.new_tag }}" \
            --title "$(basename `git rev-parse --show-toplevel`) ${{ steps.get_tag.outputs.new_tag }}" \
            --notes "Automated release" \
            $release_flag \
            "builds/$(basename `git rev-parse --show-toplevel`).zip"




